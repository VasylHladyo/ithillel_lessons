console.log(undefined + 1);
/*
1) Перетворення undefined в число = NaN
2) Будь-яка арифметична операція з NaN дає NaN
3) Результатом виконання даної операції буде NaN
*/

console.log('true' == true)
/*
1) Перетворення булевого значення true в число = 1
2) Перетворення рядка 'true' в число = NaN
3) Результатом порівняня NaN == 1 буде false
*/

console.log(false == 'false');
/*
1) Перетворення булевого значення false в число = 0
2) Перетворення рядка 'false' в число = NaN
3) Результатом порівняня 0 == NaN буде false
*/

console.log(null == '');
/*
Результатом порівняня null == '' буде false.
null - при порівняння повертає true лише коли воно порівнюється з null або undefined
*/

console.log(3 ** (9 / 3));
/*
1) 9 / 3 = 3
2) 3 підноситься до степеня 3. 3 ** 3 = 27
*/

console.log(!!'false' == !!'true');
/*
Результатом порівняня !!'false' == !!'true' буде true.
Через те що подвійне заперечення біля будь-якго рядка завжди повертає true.
*/

console.log(0 || '0' && 1);
/*
1) Спочатку виконається вираз '0' && 1. Виконається він першим через те що "&&" має більший пріоритет
1.1) '0' - це не порожній рядок, а значить = true
1.2) Число 1 також = true
1.3) Логічний оператор "&&" повертає останне true значення.
1.4) Результат порівняння виразу '0' && 1 = 1
2) Далі порівнюється вираз 0 || 1
2.1) "0" при порівнянні завжди повертає false
2.2) Логічний оператор "||" повертає перше true значення
2.3) Результат порівняння виразу 0 || 1 = 1
*/

console.log(1 < 2 < 3);
/*
1) Спочатку виконається вираз 1 < 2.
1.1) Результатом порівняння в даному виразі буде true. Адже 1 менше 2.
2) Далі буде виконуватися вираз true < 3
2.1) true при перетворенні в число дає 1
2.2) Результат порівняння 1 < 3 буде true
*/

console.log('foo'+ + +'bar');
/*
1) Спочатку буде спроба перетворити рядок 'bar' в число через те, що перед ним стоїть знак "+"
   Результатом спроби перетворення даного рядка в число буде NaN.
2) Далі вираз вже буде мати вигляд 'foo'+ + NaN
3) В даному виразі перед NaN стоїть знак "+". Будь яка арифметична операція з NaN дає NaN
4) Кінцевий вигляд виразу буде 'foo'+ NaN. Оскільки першим операндом перед знаком "+" є рядок, то і другий операнд буде
   перетворений на рядок і вираз буде мати вигляд 'foo'+ 'NaN', значить відбудеться конкатинація
5) Результатом даного виразу буде рядок 'fooNaN'
*/

console.log(3 ** 2 / 3);
/*
1) 3 ** 2 = 9
2) 9 / 3 = 3
*/

console.log(1 < 2 > 3);
/*
1) Спочатку виконається вираз 1 < 2.
1.1) Результатом порівняння в даному виразі буде true. Адже 1 менше 2.
2) Далі буде виконуватися вираз true > 3
2.1) true при перетворенні в число дає 1
2.2) Результат порівняння 1 > 3 буде false
*/

console.log((+null == false) < 1);
/*
1) +null - перетворюється на 0
2) false - перетворюється на 0
3) порівняння 0 == 0 дає true
4) зараз вираз ває вигляд true < 1
5) true - перетворюється на 1
6) результатом порівняння 1 < 1 буде false
*/

console.log(false && true || true);
/*
1) false && true = false Оскільки логічний оператор "&&" поверне перше хибне значення.
2) false || true = true Оскільки логічний оператор "||" поверне перше true значення.
3) результат = true
*/

console.log(false && (true || true));
/*
1) true || true = true
2) false && true = false Оскільки логічний оператор "&&" поверне перше хибне значення.
3) результат = false
*/

console.log((+null == false) < 1 ** 5);
/*
1) +null == false = true = 1
2) 1 ** 5 = 1
3) 1 < 1 = false
*/